[{"D:\\ADA\\ADA Portal\\src\\index.js":"1","D:\\ADA\\ADA Portal\\src\\serviceWorker.js":"2","D:\\ADA\\ADA Portal\\src\\context\\UserContext.js":"3","D:\\ADA\\ADA Portal\\src\\context\\LayoutContext.js":"4","D:\\ADA\\ADA Portal\\src\\components\\Layout\\Layout.js":"5","D:\\ADA\\ADA Portal\\src\\pages\\login\\Login.js":"6","D:\\ADA\\ADA Portal\\src\\pages\\error\\Error.js":"7","D:\\ADA\\ADA Portal\\src\\pages\\error\\styles.js":"8","D:\\ADA\\ADA Portal\\src\\pages\\login\\styles.js":"9","D:\\ADA\\ADA Portal\\src\\components\\Layout\\styles.js":"10","D:\\ADA\\ADA Portal\\src\\pages\\charts\\Charts.js":"11","D:\\ADA\\ADA Portal\\src\\pages\\tables\\Tables.js":"12","D:\\ADA\\ADA Portal\\src\\pages\\notifications\\Notifications.js":"13","D:\\ADA\\ADA Portal\\src\\pages\\dashboard\\Dashboard.js":"14","D:\\ADA\\ADA Portal\\src\\pages\\typography\\Typography.js":"15","D:\\ADA\\ADA Portal\\src\\components\\Header\\Header.js":"16","D:\\ADA\\ADA Portal\\src\\pages\\icons\\Icons.js":"17","D:\\ADA\\ADA Portal\\src\\components\\Sidebar\\Sidebar.js":"18","D:\\ADA\\ADA Portal\\src\\pages\\dashboard\\mock.js":"19","D:\\ADA\\ADA Portal\\src\\components\\Sidebar\\styles.js":"20","D:\\ADA\\ADA Portal\\src\\pages\\icons\\styles.js":"21","D:\\ADA\\ADA Portal\\src\\components\\Header\\styles.js":"22","D:\\ADA\\ADA Portal\\src\\pages\\typography\\styles.js":"23","D:\\ADA\\ADA Portal\\src\\pages\\dashboard\\styles.js":"24","D:\\ADA\\ADA Portal\\src\\pages\\charts\\components\\ApexLineChart.js":"25","D:\\ADA\\ADA Portal\\src\\pages\\charts\\components\\ApexHeatmap.js":"26","D:\\ADA\\ADA Portal\\src\\components\\Sidebar\\components\\Dot.js":"27","D:\\ADA\\ADA Portal\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js":"28","D:\\ADA\\ADA Portal\\src\\pages\\notifications\\styles.js":"29","D:\\ADA\\ADA Portal\\src\\components\\PageTitle\\PageTitle.js":"30","D:\\ADA\\ADA Portal\\src\\components\\Widget\\Widget.js":"31","D:\\ADA\\ADA Portal\\src\\pages\\dashboard\\components\\Table\\Table.js":"32","D:\\ADA\\ADA Portal\\src\\pages\\dashboard\\components\\BigStat\\BigStat.js":"33","D:\\ADA\\ADA Portal\\src\\components\\Wrappers\\Wrappers.js":"34","D:\\ADA\\ADA Portal\\src\\components\\UserAvatar\\UserAvatar.js":"35","D:\\ADA\\ADA Portal\\src\\components\\Notification\\Notification.js":"36","D:\\ADA\\ADA Portal\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js":"37","D:\\ADA\\ADA Portal\\src\\components\\PageTitle\\styles.js":"38","D:\\ADA\\ADA Portal\\src\\components\\Widget\\styles.js":"39","D:\\ADA\\ADA Portal\\src\\pages\\dashboard\\components\\BigStat\\styles.js":"40","D:\\ADA\\ADA Portal\\src\\components\\UserAvatar\\styles.js":"41","D:\\ADA\\ADA Portal\\src\\components\\Notification\\styles.js":"42","D:\\ADA\\ADA Portal\\src\\assets\\themes\\index.js":"43","D:\\ADA\\ADA Portal\\src\\assets\\themes\\default.js":"44","D:\\ADA\\ADA Portal\\src\\App.js":"45","D:\\ADA\\ADA Portal\\src\\pages\\tables\\styles.js":"46","D:\\ADA\\ADA Portal\\src\\pages\\typography\\editStatusPopup.js":"47"},{"size":1058,"mtime":1678109428207,"results":"48","hashOfConfig":"49"},{"size":5083,"mtime":1678109259482,"results":"50","hashOfConfig":"49"},{"size":2053,"mtime":1677587187253,"results":"51","hashOfConfig":"49"},{"size":1444,"mtime":1677587187253,"results":"52","hashOfConfig":"49"},{"size":2090,"mtime":1677677241155,"results":"53","hashOfConfig":"49"},{"size":13353,"mtime":1677834763699,"results":"54","hashOfConfig":"49"},{"size":1626,"mtime":1677587187258,"results":"55","hashOfConfig":"49"},{"size":1395,"mtime":1677587187259,"results":"56","hashOfConfig":"49"},{"size":5689,"mtime":1677836306872,"results":"57","hashOfConfig":"49"},{"size":710,"mtime":1677587187246,"results":"58","hashOfConfig":"49"},{"size":5790,"mtime":1677587187254,"results":"59","hashOfConfig":"49"},{"size":11683,"mtime":1678348136387,"results":"60","hashOfConfig":"49"},{"size":13055,"mtime":1678190521299,"results":"61","hashOfConfig":"49"},{"size":16878,"mtime":1678104673594,"results":"62","hashOfConfig":"49"},{"size":10238,"mtime":1678190521302,"results":"63","hashOfConfig":"49"},{"size":11270,"mtime":1678193150085,"results":"64","hashOfConfig":"49"},{"size":391433,"mtime":1677587187262,"results":"65","hashOfConfig":"49"},{"size":3634,"mtime":1678104673569,"results":"66","hashOfConfig":"49"},{"size":3580,"mtime":1677844536096,"results":"67","hashOfConfig":"49"},{"size":1369,"mtime":1678104673582,"results":"68","hashOfConfig":"49"},{"size":812,"mtime":1677587187263,"results":"69","hashOfConfig":"49"},{"size":4196,"mtime":1677844536092,"results":"70","hashOfConfig":"49"},{"size":829,"mtime":1678190521304,"results":"71","hashOfConfig":"49"},{"size":3326,"mtime":1678104673604,"results":"72","hashOfConfig":"49"},{"size":1396,"mtime":1677587187255,"results":"73","hashOfConfig":"49"},{"size":1909,"mtime":1677587187255,"results":"74","hashOfConfig":"49"},{"size":902,"mtime":1677587187249,"results":"75","hashOfConfig":"49"},{"size":5111,"mtime":1677848861363,"results":"76","hashOfConfig":"49"},{"size":3489,"mtime":1678104491878,"results":"77","hashOfConfig":"49"},{"size":495,"mtime":1678259929920,"results":"78","hashOfConfig":"49"},{"size":2581,"mtime":1677587187251,"results":"79","hashOfConfig":"49"},{"size":1627,"mtime":1678104673599,"results":"80","hashOfConfig":"49"},{"size":1558,"mtime":1677844536094,"results":"81","hashOfConfig":"49"},{"size":3946,"mtime":1678259424516,"results":"82","hashOfConfig":"49"},{"size":620,"mtime":1677587187250,"results":"83","hashOfConfig":"49"},{"size":3413,"mtime":1677587187246,"results":"84","hashOfConfig":"49"},{"size":1678,"mtime":1678092277184,"results":"85","hashOfConfig":"49"},{"size":724,"mtime":1678259799914,"results":"86","hashOfConfig":"49"},{"size":1022,"mtime":1678094608415,"results":"87","hashOfConfig":"49"},{"size":1075,"mtime":1677587187256,"results":"88","hashOfConfig":"49"},{"size":291,"mtime":1677587187251,"results":"89","hashOfConfig":"49"},{"size":1040,"mtime":1677587187247,"results":"90","hashOfConfig":"49"},{"size":534,"mtime":1677587187270,"results":"91","hashOfConfig":"49"},{"size":3925,"mtime":1678344953139,"results":"92","hashOfConfig":"49"},{"size":1818,"mtime":1677674866078,"results":"93","hashOfConfig":"49"},{"size":2651,"mtime":1678197136747,"results":"94","hashOfConfig":"49"},{"size":1288,"mtime":1678190521303,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"10p3fm1",{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"98"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"98"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"98"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"98"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"98"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"98"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"98"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"98"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"98"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"98"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"98"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"98"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"98"},"D:\\ADA\\ADA Portal\\src\\index.js",[],["205","206"],"D:\\ADA\\ADA Portal\\src\\serviceWorker.js",[],"D:\\ADA\\ADA Portal\\src\\context\\UserContext.js",[],"D:\\ADA\\ADA Portal\\src\\context\\LayoutContext.js",[],"D:\\ADA\\ADA Portal\\src\\components\\Layout\\Layout.js",["207","208","209","210","211","212","213"],"import React from \"react\";\r\nimport { Route, Switch, Redirect, withRouter } from \"react-router-dom\";\r\nimport classnames from \"classnames\";\r\nimport { Box, IconButton, Link } from \"@material-ui/core\";\r\nimport Icon from \"@mdi/react\";\r\n\r\n//icons\r\nimport {\r\n  mdiFacebook as FacebookIcon,\r\n  mdiTwitter as TwitterIcon,\r\n  mdiGithub as GithubIcon,\r\n} from \"@mdi/js\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport Header from \"../Header\";\r\nimport Sidebar from \"../Sidebar\";\r\n\r\n// pages\r\nimport Dashboard from \"../../pages/dashboard\";\r\nimport Typography from \"../../pages/typography\";\r\nimport Notifications from \"../../pages/notifications\";\r\n// import Maps from \"../../pages/maps\";\r\nimport Tables from \"../../pages/tables\";\r\nimport Icons from \"../../pages/icons\";\r\nimport Charts from \"../../pages/charts\";\r\n\r\n// context\r\nimport { useLayoutState } from \"../../context/LayoutContext\";\r\n\r\nfunction Layout(props) {\r\n  var classes = useStyles();\r\n\r\n  // global\r\n  var layoutState = useLayoutState();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <>\r\n        <Header history={props.history} />\r\n        <Sidebar />\r\n        <div\r\n          className={classnames(classes.content, {\r\n            [classes.contentShift]: layoutState.isSidebarOpened,\r\n          })}\r\n        >\r\n          <div className={classes.fakeToolbar} />\r\n          <Switch>\r\n            <Route path=\"/app/dashboard\" component={Dashboard} />\r\n            <Route path=\"/app/typography\" component={Typography} />\r\n            <Route path=\"/app/tables\" component={Tables} />\r\n            <Route path=\"/app/notifications\" component={Notifications} />\r\n            <Route\r\n              exact\r\n              path=\"/app/ui\"\r\n              render={() => <Redirect to=\"/app/ui/icons\" />}\r\n            />\r\n            {/* <Route path=\"/app/ui/maps\" component={Maps} /> */}\r\n            <Route path=\"/app/ui/icons\" component={Icons} />\r\n            <Route path=\"/app/ui/charts\" component={Charts} />\r\n          </Switch>\r\n        </div>\r\n      </>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(Layout);\r\n","D:\\ADA\\ADA Portal\\src\\pages\\login\\Login.js",["214","215","216","217","218","219","220","221","222","223","224","225","226","227","228"],"import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  CircularProgress,\r\n  Typography,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  TextField,\r\n  Fade,\r\n} from \"@material-ui/core\";\r\nimport Input from \"@material-ui/core/OutlinedInput\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nimport * as Icons from \"@material-ui/icons\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport classnames from \"classnames\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// logo\r\nimport logo from \"./logo.svg\";\r\n// import google from \"../../images/google.svg\";\r\nimport login_img from \"../../assets/images/login.png\";\r\nimport ep_logo from \"../../assets/images/Easypaisa long logo.png\";\r\nimport username from \"../../assets/images/username.png\";\r\nimport password from \"../../assets/images/password.png\";\r\n\r\n// context\r\nimport { useUserDispatch, loginUser } from \"../../context/UserContext\";\r\n\r\nfunction Login(props) {\r\n  var classes = useStyles();\r\n\r\n  // global\r\n  var userDispatch = useUserDispatch();\r\n\r\n  // local\r\n  var [isLoading, setIsLoading] = useState(false);\r\n  var [error, setError] = useState(null);\r\n  var [activeTabId, setActiveTabId] = useState(0);\r\n  var [nameValue, setNameValue] = useState(\"\");\r\n  var [loginValue, setLoginValue] = useState(\"admin@flatlogic.com\");\r\n  var [passwordValue, setPasswordValue] = useState(\"password\");\r\n\r\n  return (\r\n    <Grid container className={classes.container}>\r\n      <img src={login_img} alt=\"logo\" className={classes.logotypeContainer} />\r\n      {/* <img src={login_img} alt=\"logo\" className={classes.logotypeImage} /> */}\r\n      {/* <Typography className={classes.logotypeText}>Material Admin</Typography> */}\r\n      {/* </div> */}\r\n      <div className={classes.formContainer}>\r\n        <div className={classes.form}>\r\n          {/* <Tabs\r\n            value={activeTabId}\r\n            onChange={(e, id) => setActiveTabId(id)}\r\n            indicatorColor=\"primary\"\r\n            textColor=\"primary\"\r\n            centered\r\n          >\r\n            <Tab label=\"Login\" classes={{ root: classes.tab }} />\r\n            <Tab label=\"New User\" classes={{ root: classes.tab }} />\r\n          </Tabs> */}\r\n          {/* {activeTabId === 0 && ( */}\r\n          <img src={ep_logo} className={classes.tab} />\r\n          <React.Fragment>\r\n            <Typography className={classes.greeting}>\r\n              Asan Digital Account Portal\r\n            </Typography>\r\n            {/* <Button size=\"large\" className={classes.googleButton}>\r\n                <img src={google} alt=\"google\" className={classes.googleIcon} />\r\n                &nbsp;Sign in with Google\r\n              </Button> */}\r\n            <div className={classes.formDividerContainer}>\r\n              {/* <div className={classes.formDivider} /> */}\r\n              <Typography className={classes.formDividerWord}>\r\n                Login to your account\r\n              </Typography>\r\n              {/* <div className={classes.formDivider} /> */}\r\n            </div>\r\n            {/* <Fade in={error}>\r\n                <Typography color=\"secondary\" className={classes.errorMessage}>\r\n                  Something is wrong with your login or password :(\r\n                </Typography>\r\n              </Fade> */}\r\n            {/* <TextField\r\n              id=\"email\"\r\n              InputProps={{\r\n                classes: {\r\n                  // underline: classes.textFieldUnderline,\r\n                  input: classes.textField,\r\n                },\r\n                startAdornment: (\r\n                  // <InputAdornment position=\"start\">\r\n                  <Icons.AcUnit />\r\n                  // </InputAdornment>\r\n                ),\r\n              }}\r\n              value={loginValue}\r\n              onChange={(e) => setLoginValue(e.target.value)}\r\n              margin=\"normal\"\r\n              placeholder=\"Username\"\r\n              type=\"email\"\r\n              // fullWidth\r\n            /> */}\r\n            <div className={classes.root}>\r\n              <Input\r\n                id=\"email\"\r\n                classes={{\r\n                  root: classes.input,\r\n                  notchedOutline: classes.notchedOutline,\r\n                  focused: classes.focused,\r\n                  adornedStart: classes.adornedStart,\r\n                }}\r\n                name=\"username\"\r\n                type=\"text\"\r\n                placeholder=\"User Name\"\r\n                value={loginValue}\r\n                onChange={(e) => setLoginValue(e.target.value)}\r\n                startAdornment={\r\n                  <InputAdornment position=\"start\">\r\n                    <img src={username} classes={classes.username} />\r\n                  </InputAdornment>\r\n                }\r\n              />\r\n            </div>\r\n\r\n            <div className={classes.root}>\r\n              <Input\r\n                id=\"password\"\r\n                classes={{\r\n                  root: classes.input,\r\n                  notchedOutline: classes.notchedOutline,\r\n                  focused: classes.focused,\r\n                  adornedStart: classes.adornedStart,\r\n                  input: classes.textField,\r\n                }}\r\n                value={passwordValue}\r\n                onChange={(e) => setPasswordValue(e.target.value)}\r\n                margin=\"normal\"\r\n                placeholder=\"Password\"\r\n                type=\"password\"\r\n                startAdornment={\r\n                  <InputAdornment position=\"start\">\r\n                    <img src={password} classes={classes.username} />\r\n                  </InputAdornment>\r\n                }\r\n              />\r\n            </div>\r\n\r\n            {/* <TextField\r\n              id=\"password\"\r\n              InputProps={{\r\n                classes: {\r\n                  underline: classes.textFieldUnderline,\r\n                  input: classes.textField,\r\n                },\r\n              }}\r\n              value={passwordValue}\r\n              onChange={(e) => setPasswordValue(e.target.value)}\r\n              margin=\"normal\"\r\n              placeholder=\"Password\"\r\n              type=\"password\"\r\n              fullWidth\r\n            /> */}\r\n\r\n            {/* <TextField\r\n              // label=\"With normal TextField\"\r\n              id=\"outlined-adornment-amount\"\r\n              sx={{ m: 1, width: \"25ch\" }}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <img src={username} classes={classes.username} />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            /> */}\r\n            {/* <div className={classes.root}>\r\n              <Input\r\n                classes={{\r\n                  root: classes.input,\r\n                  notchedOutline: classes.notchedOutline,\r\n                  focused: classes.focused,\r\n                  adornedStart: classes.adornedStart,\r\n                }}\r\n                name=\"username\"\r\n                type=\"text\"\r\n                placeholder=\"User Name\"\r\n                startAdornment={\r\n                  <InputAdornment position=\"start\">\r\n                    <img src={username} classes={classes.username} />\r\n                  </InputAdornment>\r\n                }\r\n              />\r\n            </div> */}\r\n\r\n            <div className={classes.formButtons}>\r\n              <Button\r\n                disableFocusRipple\r\n                disableRipple\r\n                style={{ backgroundColor: \"#504C5B\" }}\r\n                className={classes.loginButton}\r\n                disabled={loginValue.length === 0 || passwordValue.length === 0}\r\n                // onClick={() =>\r\n                //   loginUser(\r\n                //     userDispatch,\r\n                //     loginValue,\r\n                //     passwordValue,\r\n                //     props.history,\r\n                //     setIsLoading,\r\n                //     setError,\r\n                //   )\r\n                // }\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                // size=\"large\"\r\n              >\r\n                Sign Up\r\n              </Button>\r\n              <Button\r\n                disableFocusRipple\r\n                disableRipple\r\n                style={{ backgroundColor: \"#2DB45F\" }}\r\n                className={classes.signupButton}\r\n                disabled={loginValue.length === 0 || passwordValue.length === 0}\r\n                onClick={() =>\r\n                  loginUser(\r\n                    userDispatch,\r\n                    loginValue,\r\n                    passwordValue,\r\n                    props.history,\r\n                    setIsLoading,\r\n                    setError,\r\n                  )\r\n                }\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                // size=\"large\"\r\n              >\r\n                Login{\" \"}\r\n                {isLoading ? (\r\n                  <CircularProgress size={26} className={classes.loginLoader} />\r\n                ) : (\r\n                  \" \"\r\n                )}\r\n              </Button>\r\n            </div>\r\n            <Button\r\n              // color=\"primary\"\r\n              // size=\"large\"\r\n              className={classes.forgetButton}\r\n              disableFocusRipple\r\n              disableRipple\r\n              style={{ backgroundColor: \"transparent\" }}\r\n            >\r\n              Forgot Password?\r\n            </Button>\r\n          </React.Fragment>\r\n          {/* )} */}\r\n          {/* {activeTabId === 1 && (\r\n            <React.Fragment>\r\n              <Typography variant=\"h1\" className={classes.greeting}>\r\n                Welcome!\r\n              </Typography>\r\n              <Typography variant=\"h2\" className={classes.subGreeting}>\r\n                Create your account\r\n              </Typography>\r\n              <Fade in={error}>\r\n                <Typography color=\"secondary\" className={classes.errorMessage}>\r\n                  Something is wrong with your login or password :(\r\n                </Typography>\r\n              </Fade>\r\n              <TextField\r\n                id=\"name\"\r\n                InputProps={{\r\n                  classes: {\r\n                    underline: classes.textFieldUnderline,\r\n                    input: classes.textField,\r\n                  },\r\n                }}\r\n                value={nameValue}\r\n                onChange={(e) => setNameValue(e.target.value)}\r\n                margin=\"normal\"\r\n                placeholder=\"Full Name\"\r\n                type=\"text\"\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                id=\"email\"\r\n                InputProps={{\r\n                  classes: {\r\n                    underline: classes.textFieldUnderline,\r\n                    input: classes.textField,\r\n                  },\r\n                }}\r\n                value={loginValue}\r\n                onChange={(e) => setLoginValue(e.target.value)}\r\n                margin=\"normal\"\r\n                placeholder=\"Email Adress\"\r\n                type=\"email\"\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                id=\"password\"\r\n                InputProps={{\r\n                  classes: {\r\n                    underline: classes.textFieldUnderline,\r\n                    input: classes.textField,\r\n                  },\r\n                }}\r\n                value={passwordValue}\r\n                onChange={(e) => setPasswordValue(e.target.value)}\r\n                margin=\"normal\"\r\n                placeholder=\"Password\"\r\n                type=\"password\"\r\n                fullWidth\r\n              />\r\n              <div className={classes.creatingButtonContainer}>\r\n                {isLoading ? (\r\n                  <CircularProgress size={26} />\r\n                ) : (\r\n                  <Button\r\n                    onClick={() =>\r\n                      loginUser(\r\n                        userDispatch,\r\n                        loginValue,\r\n                        passwordValue,\r\n                        props.history,\r\n                        setIsLoading,\r\n                        setError,\r\n                      )\r\n                    }\r\n                    disabled={\r\n                      loginValue.length === 0 ||\r\n                      passwordValue.length === 0 ||\r\n                      nameValue.length === 0\r\n                    }\r\n                    size=\"large\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    className={classes.createAccountButton}\r\n                  >\r\n                    Create your account\r\n                  </Button>\r\n                )}\r\n              </div>\r\n              <div className={classes.formDividerContainer}>\r\n                <div className={classes.formDivider} />\r\n                <Typography className={classes.formDividerWord}>or</Typography>\r\n                <div className={classes.formDivider} />\r\n              </div>\r\n              <Button\r\n                size=\"large\"\r\n                className={classnames(\r\n                  classes.googleButton,\r\n                  classes.googleButtonCreating,\r\n                )}\r\n              >\r\n                <img src={google} alt=\"google\" className={classes.googleIcon} />\r\n                &nbsp;Sign in with Google\r\n              </Button>\r\n            </React.Fragment>\r\n          )} */}\r\n        </div>\r\n      </div>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default withRouter(Login);\r\n","D:\\ADA\\ADA Portal\\src\\pages\\error\\Error.js",[],"D:\\ADA\\ADA Portal\\src\\pages\\error\\styles.js",[],"D:\\ADA\\ADA Portal\\src\\pages\\login\\styles.js",[],"D:\\ADA\\ADA Portal\\src\\components\\Layout\\styles.js",[],"D:\\ADA\\ADA Portal\\src\\pages\\charts\\Charts.js",[],"D:\\ADA\\ADA Portal\\src\\pages\\tables\\Tables.js",["229","230","231"],"D:\\ADA\\ADA Portal\\src\\pages\\notifications\\Notifications.js",["232","233","234","235","236","237","238","239","240"],"import React, { useState } from \"react\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport { Grid, CircularProgress } from \"@material-ui/core\";\r\nimport { Close as CloseIcon } from \"@material-ui/icons\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\r\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\r\nimport classnames from \"classnames\";\r\nimport back_btn from \"../../assets/images/back_btn.png\";\r\nimport Input from \"@material-ui/core/OutlinedInput\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\n// styles\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport Widget from \"../../components/Widget/Widget\";\r\nimport PageTitle from \"../../components/PageTitle/PageTitle\";\r\nimport Notification from \"../../components/Notification\";\r\nimport { Typography, Button } from \"../../components/Wrappers/Wrappers\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst positions = [\r\n  toast.POSITION.TOP_LEFT,\r\n  toast.POSITION.TOP_CENTER,\r\n  toast.POSITION.TOP_RIGHT,\r\n  toast.POSITION.BOTTOM_LEFT,\r\n  toast.POSITION.BOTTOM_CENTER,\r\n  toast.POSITION.BOTTOM_RIGHT,\r\n];\r\n\r\nexport default function NotificationsPage(props) {\r\n  var classes = useStyles();\r\n\r\n  const history = useHistory();\r\n\r\n  const handleBackButtonClick = () => {\r\n    history.push(\"/app/dashboard\"); // Navigate to the hardcoded link\r\n  };\r\n\r\n  // local\r\n  var [notificationsPosition, setNotificationPosition] = useState(2);\r\n  var [errorToastId, setErrorToastId] = useState(null);\r\n\r\n  return (\r\n    <>\r\n      <PageTitle\r\n        title=\"Change Password\"\r\n        button={\r\n          <IconButton aria-label=\"back_button\" onClick={handleBackButtonClick}>\r\n            <img\r\n              src={back_btn}\r\n              alt={\"back_button\"}\r\n              className={classes.back_button}\r\n            />\r\n          </IconButton>\r\n        }\r\n      />\r\n      <Grid container style={{ flexDirection: \"column\", paddingLeft: \"25px\" }}>\r\n        <Typography className={classes.typo}>Email ID</Typography>\r\n\r\n        <div className={classes.root}>\r\n          <Input\r\n            id=\"email\"\r\n            classes={{\r\n              root: classes.input,\r\n              notchedOutline: classes.notchedOutline,\r\n              focused: classes.focused,\r\n              adornedStart: classes.adornedStart,\r\n            }}\r\n            name=\"username\"\r\n            type=\"text\"\r\n            placeholder=\"Enter Email ID Here\"\r\n            startAdornment={<InputAdornment position=\"start\" />}\r\n          />\r\n        </div>\r\n        <Typography className={classes.typo}>User ID</Typography>\r\n\r\n        <div className={classes.root}>\r\n          <Input\r\n            id=\"email\"\r\n            classes={{\r\n              root: classes.input,\r\n              notchedOutline: classes.notchedOutline,\r\n              focused: classes.focused,\r\n              adornedStart: classes.adornedStart,\r\n            }}\r\n            name=\"username\"\r\n            type=\"text\"\r\n            placeholder=\"Enter User ID Here\"\r\n            startAdornment={<InputAdornment position=\"start\" />}\r\n          />\r\n        </div>\r\n        <Typography className={classes.typo}>New Password</Typography>\r\n\r\n        <div className={classes.root}>\r\n          <Input\r\n            id=\"email\"\r\n            classes={{\r\n              root: classes.input,\r\n              notchedOutline: classes.notchedOutline,\r\n              focused: classes.focused,\r\n              adornedStart: classes.adornedStart,\r\n            }}\r\n            name=\"username\"\r\n            type=\"text\"\r\n            placeholder=\"Enter New Password Here\"\r\n            startAdornment={<InputAdornment position=\"start\" />}\r\n          />\r\n        </div>\r\n        <Typography className={classes.typo}>Confirm New Password</Typography>\r\n\r\n        <div className={classes.root}>\r\n          <Input\r\n            id=\"email\"\r\n            classes={{\r\n              root: classes.input,\r\n              notchedOutline: classes.notchedOutline,\r\n              focused: classes.focused,\r\n              adornedStart: classes.adornedStart,\r\n            }}\r\n            name=\"username\"\r\n            type=\"text\"\r\n            placeholder=\"Enter Confirm New Password Here\"\r\n            startAdornment={<InputAdornment position=\"start\" />}\r\n          />\r\n        </div>\r\n\r\n        <div className={classes.formButtons}>\r\n          <Button\r\n            disableFocusRipple\r\n            disableRipple\r\n            style={{ backgroundColor: \"#2DB45F\" }}\r\n            className={classes.updateButton}\r\n            // disabled={loginValue.length === 0 || passwordValue.length === 0}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            // size=\"large\"\r\n          >\r\n            Update\r\n          </Button>\r\n        </div>\r\n      </Grid>\r\n      {/* <Widget disableWidgetMenu>\r\n        <Grid container item xs={12}>\r\n          <Grid item>\r\n            <Widget\r\n              title=\"Layout Options\"\r\n              noWidgetShadow\r\n              disableWidgetMenu\r\n              noBodyPadding\r\n              noHeaderPadding\r\n              style={{ paddingRight: 15 }}\r\n              headerClass={classes.widgetHeader}\r\n            >\r\n              <Typography>Email ID</Typography>\r\n\r\n              <div className={classes.root}>\r\n                <Input\r\n                  id=\"email\"\r\n                  classes={{\r\n                    root: classes.input,\r\n                    notchedOutline: classes.notchedOutline,\r\n                    focused: classes.focused,\r\n                    adornedStart: classes.adornedStart,\r\n                  }}\r\n                  name=\"username\"\r\n                  type=\"text\"\r\n                  placeholder=\"User Name\"\r\n                  startAdornment={\r\n                    <InputAdornment position=\"start\"></InputAdornment>\r\n                  }\r\n                />\r\n              </div>\r\n            </Widget>\r\n          </Grid>\r\n        </Grid>\r\n      </Widget> */}\r\n      {/* </Grid> */}\r\n      {/* <Grid item xs={12} md={6} lg={4}>\r\n          <Widget title=\"Notification Types Examples\" disableWidgetMenu>\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              shadowless\r\n              type=\"message\"\r\n              message=\"Thanks for Checking out Messenger\"\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n            />\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              shadowless\r\n              type=\"feedback\"\r\n              message=\"New user feedback received\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            />\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              shadowless\r\n              type=\"customer\"\r\n              message=\"New customer is registered\"\r\n              variant=\"contained\"\r\n              color=\"success\"\r\n            />\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              shadowless\r\n              type=\"shipped\"\r\n              message=\"The order was shipped\"\r\n              variant=\"contained\"\r\n              color=\"warning\"\r\n            />\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              shadowless\r\n              type=\"delivered\"\r\n              message=\"The order was delivered\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            />\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              shadowless\r\n              type=\"defence\"\r\n              message=\"5 Defence alerts\"\r\n              variant=\"contained\"\r\n              color=\"info\"\r\n            />\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item xs={12} md={6} lg={4}>\r\n          <Widget title=\"Notification Types Examples\" disableWidgetMenu>\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              type=\"report\"\r\n              message=\"New report has been received\"\r\n              color=\"secondary\"\r\n            />\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              type=\"feedback\"\r\n              message=\"New user feedback received\"\r\n              color=\"primary\"\r\n            />\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              type=\"shipped\"\r\n              message=\"The item was shipped\"\r\n              color=\"success\"\r\n            />\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              type=\"message\"\r\n              message=\"The new message from user @nahawaii\"\r\n              color=\"warning\"\r\n            />\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              type=\"upload\"\r\n              message=\"Your file is ready to upload\"\r\n              color=\"primary\"\r\n            />\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              type=\"disc\"\r\n              message=\"The disc is full\"\r\n              color=\"info\"\r\n            />\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item xs={12} md={6} lg={4}>\r\n          <Widget title=\"Notification Types Examples\" disableWidgetMenu>\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              type=\"report\"\r\n              message=\"New report has been received\"\r\n              variant=\"rounded\"\r\n              color=\"secondary\"\r\n            />\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              type=\"feedback\"\r\n              message=\"New user feedback received\"\r\n              variant=\"rounded\"\r\n              color=\"primary\"\r\n            />\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              type=\"shipped\"\r\n              message=\"The item was shipped\"\r\n              variant=\"rounded\"\r\n              color=\"success\"\r\n            />\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              type=\"message\"\r\n              message=\"The new message from user @nahawaii\"\r\n              variant=\"rounded\"\r\n              color=\"warning\"\r\n            />\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              type=\"upload\"\r\n              message=\"Your file is ready to upload\"\r\n              variant=\"rounded\"\r\n              color=\"primary\"\r\n            />\r\n            <Notification\r\n              className={classes.notificationItem}\r\n              type=\"disc\"\r\n              message=\"The disc is full\"\r\n              variant=\"rounded\"\r\n              color=\"info\"\r\n            />\r\n          </Widget>\r\n        </Grid> */}\r\n      {/* </Grid> */}\r\n    </>\r\n  );\r\n\r\n  // #############################################################\r\n  function sendNotification(componentProps, options) {\r\n    return toast(\r\n      <Notification\r\n        {...componentProps}\r\n        className={classes.notificationComponent}\r\n      />,\r\n      options,\r\n    );\r\n  }\r\n\r\n  function retryErrorNotification() {\r\n    var componentProps = {\r\n      type: \"message\",\r\n      message: \"Message was sent successfully!\",\r\n      variant: \"contained\",\r\n      color: \"success\",\r\n    };\r\n    toast.update(errorToastId, {\r\n      render: <Notification {...componentProps} />,\r\n      type: \"success\",\r\n    });\r\n    setErrorToastId(null);\r\n  }\r\n\r\n  function handleNotificationCall(notificationType) {\r\n    var componentProps;\r\n\r\n    if (errorToastId && notificationType === \"error\") return;\r\n\r\n    switch (notificationType) {\r\n      case \"info\":\r\n        componentProps = {\r\n          type: \"feedback\",\r\n          message: \"New user feedback received\",\r\n          variant: \"contained\",\r\n          color: \"primary\",\r\n        };\r\n        break;\r\n      case \"error\":\r\n        componentProps = {\r\n          type: \"message\",\r\n          message: \"Message was not sent!\",\r\n          variant: \"contained\",\r\n          color: \"secondary\",\r\n          extraButton: \"Resend\",\r\n          extraButtonClick: retryErrorNotification,\r\n        };\r\n        break;\r\n      default:\r\n        componentProps = {\r\n          type: \"shipped\",\r\n          message: \"The item was shipped\",\r\n          variant: \"contained\",\r\n          color: \"success\",\r\n        };\r\n    }\r\n\r\n    var toastId = sendNotification(componentProps, {\r\n      type: notificationType,\r\n      position: positions[notificationsPosition],\r\n      progressClassName: classes.progress,\r\n      onClose: notificationType === \"error\" && (() => setErrorToastId(null)),\r\n      className: classes.notification,\r\n    });\r\n\r\n    if (notificationType === \"error\") setErrorToastId(toastId);\r\n  }\r\n\r\n  function changeNotificationPosition(positionId) {\r\n    setNotificationPosition(positionId);\r\n  }\r\n}\r\n\r\n// #############################################################\r\nfunction CloseButton({ closeToast, className }) {\r\n  return <CloseIcon className={className} onClick={closeToast} />;\r\n}\r\n","D:\\ADA\\ADA Portal\\src\\pages\\dashboard\\Dashboard.js",["241","242","243","244","245"],"import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  LinearProgress,\r\n  Select,\r\n  OutlinedInput,\r\n  MenuItem,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport * as Icons from \"@material-ui/icons\";\r\nimport { useTheme } from \"@material-ui/styles\";\r\nimport {\r\n  ResponsiveContainer,\r\n  ComposedChart,\r\n  AreaChart,\r\n  LineChart,\r\n  Line,\r\n  Area,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  YAxis,\r\n  XAxis,\r\n} from \"recharts\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport mock from \"./mock\";\r\nimport Widget from \"../../components/Widget\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport { Typography } from \"../../components/Wrappers\";\r\nimport Dot from \"../../components/Sidebar/components/Dot\";\r\nimport Table from \"./components/Table/Table\";\r\nimport BigStat from \"./components/BigStat/BigStat\";\r\n\r\nconst mainChartData = getMainChartData();\r\nconst PieChartData = [\r\n  { name: \"Group A\", value: 400, color: \"primary\" },\r\n  { name: \"Group B\", value: 300, color: \"secondary\" },\r\n  { name: \"Group C\", value: 300, color: \"warning\" },\r\n  { name: \"Group D\", value: 200, color: \"success\" },\r\n];\r\n\r\nexport default function Dashboard(props) {\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n\r\n  // local\r\n  var [mainChartState, setMainChartState] = useState(\"monthly\");\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Dashboard\" />\r\n      <Grid container spacing={4}>\r\n        <Grid item lg={3} md={4} sm={6} xs={12}>\r\n          <Widget\r\n            title=\"Total Users\"\r\n            upperTitle\r\n            bodyClass={classes.fullHeightBody}\r\n            className={classes.card}\r\n          >\r\n            <div className={classes.visitsNumberContainer}>\r\n              <Grid container item alignItems={\"center\"}>\r\n                <Grid item xs={6}>\r\n                  <Typography size=\"xl\" weight=\"bold\" noWrap>\r\n                    40,689\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n            <Icons.TrendingUp />\r\n            <Typography className={classes.materialIconText}>\r\n              1.3% from yesterday\r\n            </Typography>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item lg={3} md={4} sm={6} xs={12}>\r\n          <Widget\r\n            title=\"Approved\"\r\n            upperTitle\r\n            bodyClass={classes.fullHeightBody}\r\n            className={classes.card}\r\n          >\r\n            <div className={classes.visitsNumberContainer}>\r\n              <Grid container item alignItems={\"center\"}>\r\n                <Grid item xs={6}>\r\n                  <Typography size=\"xl\" weight=\"bold\" noWrap>\r\n                    10,293\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n            <Icons.TrendingUp />\r\n            <Typography className={classes.materialIconText}>\r\n              1.3% from yesterday\r\n            </Typography>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item lg={3} md={4} sm={6} xs={12}>\r\n          <Widget\r\n            title=\"Rejected\"\r\n            upperTitle\r\n            bodyClass={classes.fullHeightBody}\r\n            className={classes.card}\r\n          >\r\n            <div className={classes.visitsNumberContainer}>\r\n              <Grid container item alignItems={\"center\"}>\r\n                <Grid item xs={6}>\r\n                  <Typography size=\"xl\" weight=\"bold\" noWrap>\r\n                    89,000\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n            <Icons.TrendingDown />\r\n            <Typography className={classes.materialIconText}>\r\n              1.9% from yesterday\r\n            </Typography>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item lg={3} md={4} sm={6} xs={12}>\r\n          <Widget\r\n            title=\"Total Pending\"\r\n            upperTitle\r\n            bodyClass={classes.fullHeightBody}\r\n            className={classes.card}\r\n          >\r\n            <div className={classes.visitsNumberContainer}>\r\n              <Grid container item alignItems={\"center\"}>\r\n                <Grid item xs={6}>\r\n                  <Typography size=\"xl\" weight=\"bold\" noWrap>\r\n                    2040\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n            <Icons.TrendingUp />\r\n            <Typography className={classes.materialIconText}>\r\n              1.3% from yesterday\r\n            </Typography>\r\n          </Widget>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        <Grid item lg={4} md={8} sm={6} xs={12}>\r\n          <Widget\r\n            title=\"App Performance\"\r\n            upperTitle\r\n            className={classes.card}\r\n            bodyClass={classes.fullChartBody}\r\n          >\r\n            <div className={classes.performanceLegendWrapper}>\r\n              <div className={classes.legendElement}>\r\n                <Dot color=\"warning\" />\r\n                <Typography\r\n                  color=\"text\"\r\n                  colorBrightness=\"secondary\"\r\n                  className={classes.legendElementText}\r\n                >\r\n                  Integration\r\n                </Typography>\r\n              </div>\r\n              <div className={classes.legendElement}>\r\n                <Dot color=\"primary\" />\r\n                <Typography\r\n                  color=\"text\"\r\n                  colorBrightness=\"secondary\"\r\n                  className={classes.legendElementText}\r\n                >\r\n                  SDK\r\n                </Typography>\r\n              </div>\r\n            </div>\r\n            <div className={classes.progressSection}>\r\n              <Typography\r\n                size=\"md\"\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.progressSectionTitle}\r\n              >\r\n                Integration\r\n              </Typography>\r\n              <LinearProgress\r\n                variant=\"determinate\"\r\n                value={77}\r\n                classes={{ barColorPrimary: classes.progressBarPrimary }}\r\n                className={classes.progress}\r\n              />\r\n            </div>\r\n            <div>\r\n              <Typography\r\n                size=\"md\"\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.progressSectionTitle}\r\n              >\r\n                SDK\r\n              </Typography>\r\n              <LinearProgress\r\n                variant=\"determinate\"\r\n                value={73}\r\n                classes={{ barColorPrimary: classes.progressBarWarning }}\r\n                className={classes.progress}\r\n              />\r\n            </div>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item lg={4} md={8} sm={6} xs={12}>\r\n          <Widget\r\n            title=\"Server Overview\"\r\n            upperTitle\r\n            className={classes.card}\r\n            bodyClass={classes.fullChartBody}\r\n          >\r\n            <div className={classes.serverOverviewElement}>\r\n              <Typography\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.serverOverviewElementText}\r\n                noWrap\r\n              >\r\n                60% / 37°С / 3.3 Ghz\r\n              </Typography>\r\n              <div className={classes.serverOverviewElementChartWrapper}>\r\n                <ResponsiveContainer height={50} width=\"99%\">\r\n                  <AreaChart data={getRandomData(10)}>\r\n                    <Area\r\n                      type=\"natural\"\r\n                      dataKey=\"value\"\r\n                      stroke={theme.palette.secondary.main}\r\n                      fill={theme.palette.secondary.light}\r\n                      strokeWidth={2}\r\n                      fillOpacity=\"0.25\"\r\n                    />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n            <div className={classes.serverOverviewElement}>\r\n              <Typography\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.serverOverviewElementText}\r\n                noWrap\r\n              >\r\n                54% / 31°С / 3.3 Ghz\r\n              </Typography>\r\n              <div className={classes.serverOverviewElementChartWrapper}>\r\n                <ResponsiveContainer height={50} width=\"99%\">\r\n                  <AreaChart data={getRandomData(10)}>\r\n                    <Area\r\n                      type=\"natural\"\r\n                      dataKey=\"value\"\r\n                      stroke={theme.palette.primary.main}\r\n                      fill={theme.palette.primary.light}\r\n                      strokeWidth={2}\r\n                      fillOpacity=\"0.25\"\r\n                    />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n            <div className={classes.serverOverviewElement}>\r\n              <Typography\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.serverOverviewElementText}\r\n                noWrap\r\n              >\r\n                57% / 21°С / 3.3 Ghz\r\n              </Typography>\r\n              <div className={classes.serverOverviewElementChartWrapper}>\r\n                <ResponsiveContainer height={50} width=\"99%\">\r\n                  <AreaChart data={getRandomData(10)}>\r\n                    <Area\r\n                      type=\"natural\"\r\n                      dataKey=\"value\"\r\n                      stroke={theme.palette.warning.main}\r\n                      fill={theme.palette.warning.light}\r\n                      strokeWidth={2}\r\n                      fillOpacity=\"0.25\"\r\n                    />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item lg={4} md={4} sm={6} xs={12}>\r\n          <Widget title=\"Revenue Breakdown\" upperTitle className={classes.card}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={6}>\r\n                <ResponsiveContainer width=\"100%\" height={144}>\r\n                  <PieChart>\r\n                    <Pie\r\n                      data={PieChartData}\r\n                      innerRadius={30}\r\n                      outerRadius={40}\r\n                      dataKey=\"value\"\r\n                    >\r\n                      {PieChartData.map((entry, index) => (\r\n                        <Cell\r\n                          key={`cell-${index}`}\r\n                          fill={theme.palette[entry.color].main}\r\n                        />\r\n                      ))}\r\n                    </Pie>\r\n                  </PieChart>\r\n                </ResponsiveContainer>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <div className={classes.pieChartLegendWrapper}>\r\n                  {PieChartData.map(({ name, value, color }, index) => (\r\n                    <div key={color} className={classes.legendItemContainer}>\r\n                      <Dot color={color} />\r\n                      <Typography\r\n                        style={{ whiteSpace: \"nowrap\", fontSize: 12 }}\r\n                      >\r\n                        &nbsp;{name}&nbsp;\r\n                      </Typography>\r\n                      <Typography color=\"text\" colorBrightness=\"secondary\">\r\n                        &nbsp;{value}\r\n                      </Typography>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </Widget>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Widget\r\n            bodyClass={classes.mainChartBody}\r\n            header={\r\n              <div className={classes.mainChartHeader}>\r\n                <Typography\r\n                  variant=\"h5\"\r\n                  color=\"text\"\r\n                  colorBrightness=\"secondary\"\r\n                >\r\n                  Daily Line Chart\r\n                </Typography>\r\n                <div className={classes.mainChartHeaderLabels}>\r\n                  <div className={classes.mainChartHeaderLabel}>\r\n                    <Dot color=\"warning\" />\r\n                    <Typography className={classes.mainChartLegentElement}>\r\n                      Tablet\r\n                    </Typography>\r\n                  </div>\r\n                  <div className={classes.mainChartHeaderLabel}>\r\n                    <Dot color=\"primary\" />\r\n                    <Typography className={classes.mainChartLegentElement}>\r\n                      Mobile\r\n                    </Typography>\r\n                  </div>\r\n                  <div className={classes.mainChartHeaderLabel}>\r\n                    <Dot color=\"secondary\" />\r\n                    <Typography className={classes.mainChartLegentElement}>\r\n                      Desktop\r\n                    </Typography>\r\n                  </div>\r\n                </div>\r\n                <Select\r\n                  value={mainChartState}\r\n                  onChange={(e) => setMainChartState(e.target.value)}\r\n                  input={\r\n                    <OutlinedInput\r\n                      labelWidth={0}\r\n                      classes={{\r\n                        notchedOutline: classes.mainChartSelectRoot,\r\n                        input: classes.mainChartSelect,\r\n                      }}\r\n                    />\r\n                  }\r\n                  autoWidth\r\n                >\r\n                  <MenuItem value=\"daily\">Daily</MenuItem>\r\n                  <MenuItem value=\"weekly\">Weekly</MenuItem>\r\n                  <MenuItem value=\"monthly\">Monthly</MenuItem>\r\n                </Select>\r\n              </div>\r\n            }\r\n          >\r\n            <ResponsiveContainer width=\"100%\" minWidth={500} height={350}>\r\n              <ComposedChart\r\n                margin={{ top: 0, right: -15, left: -15, bottom: 0 }}\r\n                data={mainChartData}\r\n              >\r\n                <YAxis\r\n                  ticks={[0, 2500, 5000, 7500]}\r\n                  tick={{ fill: theme.palette.text.hint + \"80\", fontSize: 14 }}\r\n                  stroke={theme.palette.text.hint + \"80\"}\r\n                  tickLine={false}\r\n                />\r\n                <XAxis\r\n                  tickFormatter={(i) => i + 1}\r\n                  tick={{ fill: theme.palette.text.hint + \"80\", fontSize: 14 }}\r\n                  stroke={theme.palette.text.hint + \"80\"}\r\n                  tickLine={false}\r\n                />\r\n                <Area\r\n                  type=\"natural\"\r\n                  dataKey=\"desktop\"\r\n                  fill={theme.palette.background.light}\r\n                  strokeWidth={0}\r\n                  activeDot={false}\r\n                />\r\n                <Line\r\n                  type=\"natural\"\r\n                  dataKey=\"mobile\"\r\n                  stroke={theme.palette.primary.main}\r\n                  strokeWidth={2}\r\n                  dot={false}\r\n                  activeDot={false}\r\n                />\r\n                <Line\r\n                  type=\"linear\"\r\n                  dataKey=\"tablet\"\r\n                  stroke={theme.palette.warning.main}\r\n                  strokeWidth={2}\r\n                  dot={{\r\n                    stroke: theme.palette.warning.dark,\r\n                    strokeWidth: 2,\r\n                    fill: theme.palette.warning.main,\r\n                  }}\r\n                />\r\n              </ComposedChart>\r\n            </ResponsiveContainer>\r\n          </Widget>\r\n        </Grid>\r\n\r\n        {/* <Grid item xs={12}>\r\n          <Widget\r\n            title=\"Support Requests\"\r\n            upperTitle\r\n            noBodyPadding\r\n            bodyClass={classes.tableWidget}\r\n          >\r\n            <Table data={mock.table} />\r\n          </Widget>\r\n        </Grid> */}\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\n// #######################################################################\r\nfunction getRandomData(length, min, max, multiplier = 10, maxDiff = 10) {\r\n  var array = new Array(length).fill();\r\n  let lastValue;\r\n\r\n  return array.map((item, index) => {\r\n    let randomValue = Math.floor(Math.random() * multiplier + 1);\r\n\r\n    while (\r\n      randomValue <= min ||\r\n      randomValue >= max ||\r\n      (lastValue && randomValue - lastValue > maxDiff)\r\n    ) {\r\n      randomValue = Math.floor(Math.random() * multiplier + 1);\r\n    }\r\n\r\n    lastValue = randomValue;\r\n\r\n    return { value: randomValue };\r\n  });\r\n}\r\n\r\nfunction getMainChartData() {\r\n  var resultArray = [];\r\n  var tablet = getRandomData(31, 3500, 6500, 7500, 1000);\r\n  var desktop = getRandomData(31, 1500, 7500, 7500, 1500);\r\n  var mobile = getRandomData(31, 1500, 7500, 7500, 1500);\r\n\r\n  for (let i = 0; i < tablet.length; i++) {\r\n    resultArray.push({\r\n      tablet: tablet[i].value,\r\n      desktop: desktop[i].value,\r\n      mobile: mobile[i].value,\r\n    });\r\n  }\r\n\r\n  return resultArray;\r\n}\r\n","D:\\ADA\\ADA Portal\\src\\pages\\typography\\Typography.js",[],"D:\\ADA\\ADA Portal\\src\\components\\Header\\Header.js",["246"],"import React, { useState } from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  InputBase,\r\n  Menu,\r\n  MenuItem,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  Menu as MenuIcon,\r\n  NotificationsNone as NotificationsIcon,\r\n  Person as AccountIcon,\r\n  Search as SearchIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n} from \"@material-ui/icons\";\r\nimport classNames from \"classnames\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport { Badge, Typography } from \"../Wrappers\";\r\nimport Notification from \"../Notification/Notification\";\r\n\r\nimport ep_logo from \"../../assets/images/Easypaisa long logo.png\";\r\nimport UserImage from \"../../assets/images/User.png\";\r\n\r\n// context\r\nimport {\r\n  useLayoutState,\r\n  useLayoutDispatch,\r\n  toggleSidebar,\r\n} from \"../../context/LayoutContext\";\r\nimport { useUserDispatch, signOut } from \"../../context/UserContext\";\r\n\r\nconst messages = [\r\n  {\r\n    id: 0,\r\n    variant: \"warning\",\r\n    name: \"Jane Hew\",\r\n    message: \"Hey! How is it going?\",\r\n    time: \"9:32\",\r\n  },\r\n  {\r\n    id: 1,\r\n    variant: \"success\",\r\n    name: \"Lloyd Brown\",\r\n    message: \"Check out my new Dashboard\",\r\n    time: \"9:18\",\r\n  },\r\n  {\r\n    id: 2,\r\n    variant: \"primary\",\r\n    name: \"Mark Winstein\",\r\n    message: \"I want rearrange the appointment\",\r\n    time: \"9:15\",\r\n  },\r\n  {\r\n    id: 3,\r\n    variant: \"secondary\",\r\n    name: \"Liana Dutti\",\r\n    message: \"Good news from sale department\",\r\n    time: \"9:09\",\r\n  },\r\n];\r\n\r\nconst notifications = [\r\n  { id: 0, color: \"warning\", message: \"Check out this awesome ticket\" },\r\n  {\r\n    id: 1,\r\n    color: \"success\",\r\n    type: \"info\",\r\n    message: \"What is the best way to get ...\",\r\n  },\r\n  {\r\n    id: 2,\r\n    color: \"secondary\",\r\n    type: \"notification\",\r\n    message: \"This is just a simple notification\",\r\n  },\r\n  {\r\n    id: 3,\r\n    color: \"primary\",\r\n    type: \"e-commerce\",\r\n    message: \"12 new orders has arrived today\",\r\n  },\r\n];\r\n\r\nexport default function Header(props) {\r\n  var classes = useStyles();\r\n\r\n  // global\r\n  var layoutState = useLayoutState();\r\n  var layoutDispatch = useLayoutDispatch();\r\n  var userDispatch = useUserDispatch();\r\n\r\n  // local\r\n\r\n  var [notificationsMenu, setNotificationsMenu] = useState(null);\r\n  var [isNotificationsUnread, setIsNotificationsUnread] = useState(true);\r\n  var [profileMenu, setProfileMenu] = useState(null);\r\n  var [isSearchOpen, setSearchOpen] = useState(true);\r\n\r\n  return (\r\n    <AppBar position=\"fixed\" className={classes.appBar}>\r\n      <Toolbar className={classes.toolbar}>\r\n        <IconButton\r\n          color=\"black\"\r\n          onClick={() => toggleSidebar(layoutDispatch)}\r\n          className={classNames(\r\n            classes.headerMenuButtonSandwich,\r\n            classes.headerMenuButtonCollapse,\r\n          )}\r\n        >\r\n          {layoutState.isSidebarOpened ? (\r\n            <ArrowBackIcon\r\n              classes={{\r\n                root: classNames(\r\n                  classes.headerIcon,\r\n                  classes.headerIconCollapse,\r\n                ),\r\n              }}\r\n            />\r\n          ) : (\r\n            <MenuIcon\r\n              classes={{\r\n                root: classNames(\r\n                  classes.headerIcon,\r\n                  classes.headerIconCollapse,\r\n                ),\r\n              }}\r\n            />\r\n          )}\r\n        </IconButton>\r\n        <img\r\n          src={ep_logo}\r\n          alt=\"logo\"\r\n          style={{\r\n            width: \"217.38px\",\r\n            height: \"46.36px\",\r\n            Top: \"102.29px\",\r\n            Left: \"65.63px\",\r\n          }}\r\n        />\r\n        <div className={classes.grow} />\r\n        {/* <Button\r\n          component={Link}\r\n          href=\"https://flatlogic.com/templates/react-material-admin-full\"\r\n          variant={\"outlined\"}\r\n          color={\"secondary\"}\r\n          className={classes.purchaseBtn}\r\n        >\r\n          Unlock full version\r\n        </Button> */}\r\n\r\n        <div\r\n          className={classNames(classes.search, {\r\n            [classes.searchFocused]: isSearchOpen,\r\n          })}\r\n        >\r\n          <div\r\n            className={classNames(classes.searchIcon, {\r\n              [classes.searchIconOpened]: isSearchOpen,\r\n            })}\r\n            onClick={() => setSearchOpen(isSearchOpen)}\r\n          >\r\n            <SearchIcon classes={{ root: classes.headerIcon }} />\r\n          </div>\r\n          <InputBase\r\n            placeholder=\"Search…\"\r\n            classes={{\r\n              root: classes.inputRoot,\r\n              input: classes.inputInput,\r\n            }}\r\n          />\r\n        </div>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-haspopup=\"true\"\r\n          aria-controls=\"mail-menu\"\r\n          onClick={(e) => {\r\n            setNotificationsMenu(e.currentTarget);\r\n            setIsNotificationsUnread(false);\r\n          }}\r\n          className={classes.headerMenuButton}\r\n        >\r\n          <Badge\r\n            badgeContent={isNotificationsUnread ? notifications.length : null}\r\n            color=\"warning\"\r\n          >\r\n            <NotificationsIcon classes={{ root: classes.headerIcon }} />\r\n          </Badge>\r\n        </IconButton>\r\n        {/* <IconButton\r\n          color=\"inherit\"\r\n          aria-haspopup=\"true\"\r\n          aria-controls=\"mail-menu\"\r\n          onClick={(e) => {\r\n            setMailMenu(e.currentTarget);\r\n            setIsMailsUnread(false);\r\n          }}\r\n          className={classes.headerMenuButton}\r\n        >\r\n          <Badge\r\n            badgeContent={isMailsUnread ? messages.length : null}\r\n            color=\"secondary\"\r\n          >\r\n            <MailIcon classes={{ root: classes.headerIcon }} />\r\n          </Badge>\r\n        </IconButton> */}\r\n        <IconButton\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\"\r\n          className={classes.headerMenuButton}\r\n          aria-controls=\"profile-menu\"\r\n          onClick={(e) => setProfileMenu(e.currentTarget)}\r\n        >\r\n          <AccountIcon classes={{ root: classes.headerIcon }} />\r\n        </IconButton>\r\n        {/* <Menu\r\n          id=\"mail-menu\"\r\n          open={Boolean(mailMenu)}\r\n          anchorEl={mailMenu}\r\n          onClose={() => setMailMenu(null)}\r\n          MenuListProps={{ className: classes.headerMenuList }}\r\n          className={classes.headerMenu}\r\n          classes={{ paper: classes.profileMenu }}\r\n          disableAutoFocusItem\r\n          disableScrollLock={true}\r\n        >\r\n          <div className={classes.profileMenuUser}>\r\n            <Typography variant=\"h4\" weight=\"medium\">\r\n              New Messages\r\n            </Typography>\r\n            <Typography\r\n              className={classes.profileMenuLink}\r\n              component=\"a\"\r\n              color=\"secondary\"\r\n            >\r\n              {messages.length} New Messages\r\n            </Typography>\r\n          </div>\r\n          {messages.map((message) => (\r\n            <MenuItem key={message.id} className={classes.messageNotification}>\r\n              <div className={classes.messageNotificationSide}>\r\n                <UserAvatar color={message.variant} name={message.name} />\r\n                <Typography size=\"sm\" color=\"text\" colorBrightness=\"secondary\">\r\n                  {message.time}\r\n                </Typography>\r\n              </div>\r\n              <div\r\n                className={classNames(\r\n                  classes.messageNotificationSide,\r\n                  classes.messageNotificationBodySide,\r\n                )}\r\n              >\r\n                <Typography weight=\"medium\" gutterBottom>\r\n                  {message.name}\r\n                </Typography>\r\n                <Typography color=\"text\" colorBrightness=\"secondary\">\r\n                  {message.message}\r\n                </Typography>\r\n              </div>\r\n            </MenuItem>\r\n          ))}\r\n          <Fab\r\n            variant=\"extended\"\r\n            color=\"primary\"\r\n            aria-label=\"Add\"\r\n            className={classes.sendMessageButton}\r\n          >\r\n            Send New Message\r\n            <SendIcon className={classes.sendButtonIcon} />\r\n          </Fab>\r\n        </Menu> */}\r\n        <Menu\r\n          id=\"notifications-menu\"\r\n          open={Boolean(notificationsMenu)}\r\n          anchorEl={notificationsMenu}\r\n          onClose={() => setNotificationsMenu(null)}\r\n          className={classes.headerMenu}\r\n          disableAutoFocusItem\r\n          disableScrollLock={true}\r\n        >\r\n          {notifications.map((notification) => (\r\n            <MenuItem\r\n              key={notification.id}\r\n              onClick={() => setNotificationsMenu(null)}\r\n              className={classes.headerMenuItem}\r\n            >\r\n              <Notification {...notification} typographyVariant=\"inherit\" />\r\n            </MenuItem>\r\n          ))}\r\n        </Menu>\r\n        <Menu\r\n          id=\"profile-menu\"\r\n          open={Boolean(profileMenu)}\r\n          anchorEl={profileMenu}\r\n          onClose={() => setProfileMenu(null)}\r\n          className={classes.headerMenu}\r\n          classes={{ paper: classes.profileMenu }}\r\n          disableAutoFocusItem\r\n          disableScrollLock={true}\r\n        >\r\n          <div className={classes.profileMenuUser}>\r\n            <img\r\n              src={UserImage}\r\n              alt=\"UserImage\"\r\n              style={{\r\n                width: \"60px\",\r\n                height: \"60px\",\r\n                marginBottom: \"10px\",\r\n                marginLeft: \"75px\",\r\n              }}\r\n            />\r\n            <Typography variant=\"h4\" weight=\"bold\">\r\n              Khushbakht Rashid\r\n            </Typography>\r\n            <Typography component=\"a\" color=\"primary\">\r\n              ID : 47990\r\n            </Typography>\r\n          </div>\r\n          <MenuItem\r\n            className={classNames(\r\n              classes.profileMenuItem,\r\n              classes.headerMenuItem,\r\n            )}\r\n          >\r\n            Profile\r\n          </MenuItem>\r\n          <MenuItem\r\n            className={classNames(\r\n              classes.profileMenuItem,\r\n              classes.headerMenuItem,\r\n            )}\r\n          >\r\n            Settings\r\n          </MenuItem>\r\n          <MenuItem\r\n            className={classNames(\r\n              classes.profileMenuItem,\r\n              classes.headerMenuItem,\r\n            )}\r\n          >\r\n            Change Password\r\n          </MenuItem>\r\n          <MenuItem\r\n            className={classNames(\r\n              classes.profileMenuItem,\r\n              classes.headerMenuItem,\r\n            )}\r\n          >\r\n            <Typography\r\n              className={classes.profileMenuLink}\r\n              color=\"primary\"\r\n              onClick={() => signOut(userDispatch, props.history)}\r\n            >\r\n              Sign Out\r\n            </Typography>\r\n          </MenuItem>\r\n        </Menu>\r\n      </Toolbar>\r\n      <Divider\r\n        orientation=\"horizontal\"\r\n        style={{\r\n          background: \"#05AC72\",\r\n          borderRadius: \"103.023px\",\r\n          width: \"200px\",\r\n          height: \"6px\",\r\n          marginLeft: \"80px\",\r\n        }}\r\n      />\r\n      <Divider\r\n        orientation=\"horizontal\"\r\n        style={{\r\n          background: \"#C5C7CD\",\r\n          borderRadius: \"103.023px\",\r\n          width: \"2002px\",\r\n          height: \"2px\",\r\n          top: \"8.95px\",\r\n        }}\r\n      />\r\n    </AppBar>\r\n  );\r\n}\r\n","D:\\ADA\\ADA Portal\\src\\pages\\icons\\Icons.js",[],"D:\\ADA\\ADA Portal\\src\\components\\Sidebar\\Sidebar.js",["247","248","249","250"],"import React, { useState, useEffect } from \"react\";\r\nimport { Drawer, IconButton, List } from \"@material-ui/core\";\r\nimport {\r\n  Home as HomeIcon,\r\n  NotificationsNone as NotificationsIcon,\r\n  FormatSize as TypographyIcon,\r\n  FilterNone as UIElementsIcon,\r\n  BorderAll as TableIcon,\r\n  QuestionAnswer as SupportIcon,\r\n  LibraryBooks as LibraryIcon,\r\n  HelpOutline as FAQIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n} from \"@material-ui/icons\";\r\nimport { useTheme } from \"@material-ui/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport classNames from \"classnames\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport SidebarLink from \"./components/SidebarLink/SidebarLink\";\r\nimport Dot from \"./components/Dot\";\r\n\r\n// context\r\nimport {\r\n  useLayoutState,\r\n  useLayoutDispatch,\r\n  toggleSidebar,\r\n} from \"../../context/LayoutContext\";\r\n\r\nconst structure = [\r\n  { id: 0, label: \"ADA Dashboard\", link: \"/app/dashboard\", icon: <HomeIcon /> },\r\n  {\r\n    id: 1,\r\n    label: \"Typography\",\r\n    link: \"/app/typography\",\r\n    icon: <TypographyIcon />,\r\n  },\r\n  {\r\n    id: 2,\r\n    label: \"ADA Application Manager\",\r\n    link: \"/app/tables\",\r\n    icon: <TableIcon />,\r\n  },\r\n  {\r\n    id: 3,\r\n    label: \"Change Password\",\r\n    link: \"/app/notifications\",\r\n    icon: <NotificationsIcon />,\r\n  },\r\n  {\r\n    id: 4,\r\n    label: \"UI Elements\",\r\n    link: \"/app/ui\",\r\n    icon: <UIElementsIcon />,\r\n    children: [\r\n      { label: \"Icons\", link: \"/app/ui/icons\" },\r\n      { label: \"Charts\", link: \"/app/ui/charts\" },\r\n    ],\r\n  },\r\n];\r\n\r\nfunction Sidebar({ location }) {\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n\r\n  // global\r\n  var { isSidebarOpened } = useLayoutState();\r\n  var layoutDispatch = useLayoutDispatch();\r\n\r\n  // local\r\n  var [isPermanent, setPermanent] = useState(true);\r\n\r\n  useEffect(function () {\r\n    window.addEventListener(\"resize\", handleWindowWidthChange);\r\n    handleWindowWidthChange();\r\n    return function cleanup() {\r\n      window.removeEventListener(\"resize\", handleWindowWidthChange);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Drawer\r\n      variant={isPermanent ? \"permanent\" : \"temporary\"}\r\n      className={classNames(classes.drawer, {\r\n        [classes.drawerOpen]: isSidebarOpened,\r\n        [classes.drawerClose]: !isSidebarOpened,\r\n      })}\r\n      classes={{\r\n        paper: classNames({\r\n          [classes.drawerOpen]: isSidebarOpened,\r\n          [classes.drawerClose]: !isSidebarOpened,\r\n        }),\r\n      }}\r\n      open={isSidebarOpened}\r\n    >\r\n      <div className={classes.toolbar} />\r\n      <div className={classes.mobileBackButton}>\r\n        <IconButton onClick={() => toggleSidebar(layoutDispatch)}>\r\n          <ArrowBackIcon\r\n            classes={{\r\n              root: classNames(classes.headerIcon, classes.headerIconCollapse),\r\n            }}\r\n          />\r\n        </IconButton>\r\n      </div>\r\n      <List className={classes.sidebarList}>\r\n        {structure.map((link) => (\r\n          <SidebarLink\r\n            key={link.id}\r\n            location={location}\r\n            isSidebarOpened={isSidebarOpened}\r\n            {...link}\r\n          />\r\n        ))}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n\r\n  // ##################################################################\r\n  function handleWindowWidthChange() {\r\n    var windowWidth = window.innerWidth;\r\n    var breakpointWidth = theme.breakpoints.values.md;\r\n    var isSmallScreen = windowWidth < breakpointWidth;\r\n\r\n    if (isSmallScreen && isPermanent) {\r\n      setPermanent(false);\r\n    } else if (!isSmallScreen && !isPermanent) {\r\n      setPermanent(true);\r\n    }\r\n  }\r\n}\r\n\r\nexport default withRouter(Sidebar);\r\n","D:\\ADA\\ADA Portal\\src\\pages\\dashboard\\mock.js",[],"D:\\ADA\\ADA Portal\\src\\components\\Sidebar\\styles.js",[],"D:\\ADA\\ADA Portal\\src\\pages\\icons\\styles.js",[],"D:\\ADA\\ADA Portal\\src\\components\\Header\\styles.js",["251"],"import { makeStyles } from \"@material-ui/styles\";\r\nimport { fade } from \"@material-ui/core/styles/colorManipulator\";\r\n\r\nexport default makeStyles((theme) => ({\r\n  logotype: {\r\n    color: \"white\",\r\n    marginLeft: theme.spacing(2.5),\r\n    marginRight: theme.spacing(2.5),\r\n    fontWeight: 500,\r\n    fontSize: 18,\r\n    whiteSpace: \"nowrap\",\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  appBar: {\r\n    width: \"100vw\",\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  toolbar: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  search: {\r\n    position: \"relative\",\r\n    borderRadius: 9,\r\n    paddingLeft: theme.spacing(2.5),\r\n    width: 36,\r\n    border: \"2px solid\",\r\n    borderColor: \"rgba(0,0,0,0.2)\",\r\n    backgroundColor: \"white\",\r\n    transition: theme.transitions.create([\"background-color\", \"width\"]),\r\n    \"&:hover\": {\r\n      cursor: \"pointer\",\r\n      backgroundColor: \"white\",\r\n    },\r\n  },\r\n  searchFocused: {\r\n    backgroundColor: \"white\",\r\n    border: \"2px solid\",\r\n    borderColor: \"rgba(0,0,0,0.2)\",\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      width: 250,\r\n    },\r\n  },\r\n  searchIcon: {\r\n    width: 36,\r\n    right: 0,\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    transition: theme.transitions.create(\"right\"),\r\n    \"&:hover\": {\r\n      cursor: \"pointer\",\r\n    },\r\n  },\r\n  searchIconOpened: {\r\n    right: theme.spacing(1.25),\r\n  },\r\n  inputRoot: {\r\n    color: \"inherit\",\r\n    width: \"100%\",\r\n  },\r\n  inputInput: {\r\n    height: 36,\r\n    padding: 0,\r\n    paddingRight: 36 + theme.spacing(1.25),\r\n    width: \"100%\",\r\n  },\r\n  messageContent: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  headerMenu: {\r\n    marginTop: theme.spacing(7),\r\n  },\r\n  headerMenuList: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  headerMenuItem: {\r\n    \"&:hover, &:focus\": {\r\n      backgroundColor: theme.palette.background.light,\r\n      // color: \"white\",\r\n    },\r\n  },\r\n  headerMenuButton: {\r\n    marginLeft: theme.spacing(2),\r\n    padding: theme.spacing(0.5),\r\n  },\r\n  headerMenuButtonSandwich: {\r\n    marginLeft: 9,\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      marginLeft: 0,\r\n    },\r\n    padding: theme.spacing(0.5),\r\n  },\r\n  headerMenuButtonCollapse: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  headerIcon: {\r\n    fontSize: 28,\r\n    color: \"rgba(0, 0, 0, 0.2)\",\r\n  },\r\n  headerIconCollapse: {\r\n    color: \"black\",\r\n  },\r\n  dashboardLogo: {\r\n    width: \"217.38px\",\r\n    height: \"46.36px\",\r\n    Top: \"102.29px\",\r\n    Left: \"65.63px\",\r\n  },\r\n  profileMenu: {\r\n    minWidth: 265,\r\n  },\r\n  profileMenuUser: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    padding: theme.spacing(2),\r\n  },\r\n  profileMenuItem: {\r\n    color: theme.palette.text.hint,\r\n  },\r\n  profileMenuIcon: {\r\n    marginRight: theme.spacing(2),\r\n    color: theme.palette.text.hint,\r\n    \"&:hover\": {\r\n      color: theme.palette.primary.main,\r\n    },\r\n  },\r\n  profileMenuLink: {\r\n    fontSize: 16,\r\n    textDecoration: \"none\",\r\n    \"&:hover\": {\r\n      cursor: \"pointer\",\r\n    },\r\n  },\r\n  messageNotification: {\r\n    height: \"auto\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    \"&:hover, &:focus\": {\r\n      backgroundColor: theme.palette.background.light,\r\n    },\r\n  },\r\n  messageNotificationSide: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  messageNotificationBodySide: {\r\n    alignItems: \"flex-start\",\r\n    marginRight: 0,\r\n  },\r\n  sendMessageButton: {\r\n    margin: theme.spacing(4),\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(2),\r\n    textTransform: \"none\",\r\n  },\r\n  sendButtonIcon: {\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n  purchaseBtn: {\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      display: \"none\",\r\n    },\r\n    marginRight: theme.spacing(3),\r\n  },\r\n}));\r\n","D:\\ADA\\ADA Portal\\src\\pages\\typography\\styles.js",[],"D:\\ADA\\ADA Portal\\src\\pages\\dashboard\\styles.js",[],"D:\\ADA\\ADA Portal\\src\\pages\\charts\\components\\ApexLineChart.js",[],"D:\\ADA\\ADA Portal\\src\\pages\\charts\\components\\ApexHeatmap.js",[],"D:\\ADA\\ADA Portal\\src\\components\\Sidebar\\components\\Dot.js",[],"D:\\ADA\\ADA Portal\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js",[],"D:\\ADA\\ADA Portal\\src\\pages\\notifications\\styles.js",[],"D:\\ADA\\ADA Portal\\src\\components\\PageTitle\\PageTitle.js",["252","253"],"import React from \"react\";\r\nimport { IconButton } from \"@material-ui/core\";\r\n// styles\r\nimport useStyles from \"./styles\";\r\nimport back_btn from \"../../assets/images/back_btn.png\";\r\n\r\n// components\r\nimport { Typography } from \"../Wrappers\";\r\n\r\nexport default function PageTitle(props) {\r\n  var classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.pageTitleContainer}>\r\n      {props.button}\r\n      <Typography className={classes.typo}>{props.title}</Typography>\r\n    </div>\r\n  );\r\n}\r\n","D:\\ADA\\ADA Portal\\src\\components\\Widget\\Widget.js",[],"D:\\ADA\\ADA Portal\\src\\pages\\dashboard\\components\\Table\\Table.js",[],"D:\\ADA\\ADA Portal\\src\\pages\\dashboard\\components\\BigStat\\BigStat.js",["254","255","256","257","258","259","260","261","262","263","264","265","266"],"import React, { useState } from \"react\";\r\nimport { Grid, Select, MenuItem, Input } from \"@material-ui/core\";\r\nimport { ArrowForward as ArrowForwardIcon } from \"@material-ui/icons\";\r\nimport { useTheme } from \"@material-ui/styles\";\r\nimport { BarChart, Bar } from \"recharts\";\r\nimport classnames from \"classnames\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport Widget from \"../../../../components/Widget\";\r\nimport { Typography } from \"../../../../components/Wrappers\";\r\n\r\nexport default function BigStat(props) {\r\n  var { product, total, color, registrations, bounce } = props;\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n\r\n  // local\r\n  var [value, setValue] = useState(\"daily\");\r\n\r\n  return (\r\n    <div className={classes.bottomStatsContainer}>\r\n      <div className={classnames(classes.statCell, classes.borderRight)}>\r\n        <Grid container alignItems=\"center\">\r\n          <Typography variant=\"h6\">{registrations[value].value}</Typography>\r\n          <ArrowForwardIcon\r\n            className={classnames(classes.profitArrow, {\r\n              [!registrations[value].profit]: classes.profitArrowDanger,\r\n            })}\r\n          />\r\n        </Grid>\r\n        <Typography size=\"sm\" color=\"text\" colorBrightness=\"secondary\">\r\n          Registrations\r\n        </Typography>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// #######################################################################\r\n\r\nfunction getRandomData() {\r\n  return Array(7)\r\n    .fill()\r\n    .map(() => ({ value: Math.floor(Math.random() * 10) + 1 }));\r\n}\r\n","D:\\ADA\\ADA Portal\\src\\components\\Wrappers\\Wrappers.js",["267"],"import React from \"react\";\r\nimport {\r\n  withStyles,\r\n  Badge as BadgeBase,\r\n  Typography as TypographyBase,\r\n  Button as ButtonBase,\r\n} from \"@material-ui/core\";\r\nimport { useTheme, makeStyles } from \"@material-ui/styles\";\r\nimport classnames from \"classnames\";\r\n\r\n// styles\r\nvar useStyles = makeStyles((theme) => ({\r\n  badge: {\r\n    fontWeight: 600,\r\n    height: 16,\r\n    minWidth: 16,\r\n  },\r\n}));\r\n\r\nfunction Badge({ children, colorBrightness, color, ...props }) {\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n  var Styled = createStyled({\r\n    badge: {\r\n      backgroundColor: \"#EF3826\",\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Styled>\r\n      {(styledProps) => (\r\n        <BadgeBase\r\n          classes={{\r\n            badge: classnames(classes.badge, styledProps.classes.badge),\r\n          }}\r\n          {...props}\r\n        >\r\n          {children}\r\n        </BadgeBase>\r\n      )}\r\n    </Styled>\r\n  );\r\n}\r\n\r\nfunction Typography({\r\n  children,\r\n  weight,\r\n  size,\r\n  colorBrightness,\r\n  color,\r\n  ...props\r\n}) {\r\n  var theme = useTheme();\r\n\r\n  return (\r\n    <TypographyBase\r\n      style={{\r\n        color: getColor(color, theme, colorBrightness),\r\n        fontWeight: getFontWeight(weight),\r\n        fontSize: getFontSize(size, props.variant, theme),\r\n      }}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </TypographyBase>\r\n  );\r\n}\r\n\r\nfunction Button({ children, color, className, ...props }) {\r\n  var theme = useTheme();\r\n\r\n  var Styled = createStyled({\r\n    root: {\r\n      color: getColor(color, theme),\r\n    },\r\n    contained: {\r\n      backgroundColor: getColor(color, theme),\r\n      boxShadow: theme.customShadows.widget,\r\n      color: `${color ? \"white\" : theme.palette.text.primary} !important`,\r\n      \"&:hover\": {\r\n        backgroundColor: getColor(color, theme, \"light\"),\r\n        boxShadow: theme.customShadows.widgetWide,\r\n      },\r\n      \"&:active\": {\r\n        boxShadow: theme.customShadows.widgetWide,\r\n      },\r\n    },\r\n    outlined: {\r\n      color: getColor(color, theme),\r\n      borderColor: getColor(color, theme),\r\n    },\r\n    select: {\r\n      backgroundColor: theme.palette.primary.main,\r\n      color: \"#fff\",\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Styled>\r\n      {({ classes }) => (\r\n        <ButtonBase\r\n          classes={{\r\n            contained: classes.contained,\r\n            root: classes.root,\r\n            outlined: classes.outlined,\r\n          }}\r\n          {...props}\r\n          className={classnames(\r\n            {\r\n              [classes.select]: props.select,\r\n            },\r\n            className,\r\n          )}\r\n        >\r\n          {children}\r\n        </ButtonBase>\r\n      )}\r\n    </Styled>\r\n  );\r\n}\r\n\r\nexport { Badge, Typography, Button };\r\n\r\n// ########################################################################\r\n\r\nfunction getColor(color, theme, brigtness = \"main\") {\r\n  if (color && theme.palette[color] && theme.palette[color][brigtness]) {\r\n    return theme.palette[color][brigtness];\r\n  }\r\n}\r\n\r\nfunction getFontWeight(style) {\r\n  switch (style) {\r\n    case \"light\":\r\n      return 300;\r\n    case \"medium\":\r\n      return 500;\r\n    case \"bold\":\r\n      return 700;\r\n    default:\r\n      return 400;\r\n  }\r\n}\r\n\r\nfunction getFontSize(size, variant = \"\", theme) {\r\n  var multiplier;\r\n\r\n  switch (size) {\r\n    case \"sm\":\r\n      multiplier = 0.8;\r\n      break;\r\n    case \"md\":\r\n      multiplier = 1.5;\r\n      break;\r\n    case \"xl\":\r\n      multiplier = 2;\r\n      break;\r\n    case \"xxl\":\r\n      multiplier = 3;\r\n      break;\r\n    default:\r\n      multiplier = 1;\r\n      break;\r\n  }\r\n\r\n  var defaultSize =\r\n    variant && theme.typography[variant]\r\n      ? theme.typography[variant].fontSize\r\n      : theme.typography.fontSize + \"px\";\r\n\r\n  return `calc(${defaultSize} * ${multiplier})`;\r\n}\r\n\r\nfunction createStyled(styles, options) {\r\n  var Styled = function (props) {\r\n    const { children, ...other } = props;\r\n    return children(other);\r\n  };\r\n\r\n  return withStyles(styles, options)(Styled);\r\n}\r\n","D:\\ADA\\ADA Portal\\src\\components\\UserAvatar\\UserAvatar.js",[],["268","269"],"D:\\ADA\\ADA Portal\\src\\components\\Notification\\Notification.js",[],"D:\\ADA\\ADA Portal\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js",["270"],"import { makeStyles } from \"@material-ui/styles\";\r\n\r\nexport default makeStyles((theme) => ({\r\n  link: {\r\n    textDecoration: \"none\",\r\n    \"&:hover, &:focus\": {\r\n      backgroundColor: theme.palette.background.light,\r\n    },\r\n  },\r\n  externalLink: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    textDecoration: \"none\",\r\n  },\r\n  linkActive: {\r\n    backgroundColor: \"none\",\r\n    paddingLeft: \"0px\",\r\n    // marginTop: \"42px\",\r\n  },\r\n  linkNested: {\r\n    paddingLeft: 0,\r\n    \"&:hover, &:focus\": {\r\n      backgroundColor: \"#FFFFFF\",\r\n    },\r\n  },\r\n  linkIcon: {\r\n    marginRight: theme.spacing(1),\r\n    color: theme.palette.text.secondary + \"99\",\r\n    transition: theme.transitions.create(\"color\"),\r\n    width: 24,\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n  linkIconActive: {\r\n    color: \"#05AC72\",\r\n    width: \"24px\",\r\n  },\r\n  linkText: {\r\n    padding: 0,\r\n    color: theme.palette.text.secondary + \"CC\",\r\n    transition: theme.transitions.create([\"opacity\", \"color\"]),\r\n    fontSize: 16,\r\n  },\r\n  linkTextActive: {\r\n    color: theme.palette.text.primary,\r\n    fontFamily: \"SF Compact Display\",\r\n    fontStyle: \"normal\",\r\n    fontWeight: 600,\r\n    fontSize: \"18px\",\r\n    lineHeight: \"35px\",\r\n    color: \"rgba(0, 0, 0, 0.87)\",\r\n  },\r\n  linkTextHidden: {\r\n    opacity: 0,\r\n  },\r\n  nestedList: {\r\n    paddingLeft: theme.spacing(2) + 30,\r\n  },\r\n  sectionTitle: {\r\n    marginLeft: theme.spacing(4.5),\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  divider: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(4),\r\n    height: 1,\r\n    backgroundColor: \"#D8D8D880\",\r\n  },\r\n}));\r\n","D:\\ADA\\ADA Portal\\src\\components\\PageTitle\\styles.js",[],"D:\\ADA\\ADA Portal\\src\\components\\Widget\\styles.js",[],"D:\\ADA\\ADA Portal\\src\\pages\\dashboard\\components\\BigStat\\styles.js",[],"D:\\ADA\\ADA Portal\\src\\components\\UserAvatar\\styles.js",[],"D:\\ADA\\ADA Portal\\src\\components\\Notification\\styles.js",[],"D:\\ADA\\ADA Portal\\src\\assets\\themes\\index.js",[],"D:\\ADA\\ADA Portal\\src\\assets\\themes\\default.js",[],"D:\\ADA\\ADA Portal\\src\\App.js",[],"D:\\ADA\\ADA Portal\\src\\pages\\tables\\styles.js",["271"],"import { makeStyles } from \"@material-ui/styles\";\r\n\r\nexport default makeStyles((theme) => ({\r\n  tableOverflow: {\r\n    overflow: \"auto\",\r\n  },\r\n  form: {\r\n    width: \"596px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  formButtons: {\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    justifyContent: \"start\",\r\n    alignItems: \"center\",\r\n  },\r\n  tblButton: {\r\n    // background: \"#FFFFFF;\",\r\n    borderRadius: \"43.3779px\",\r\n    fontFamily: \"SF Compact Display\",\r\n    fontStyle: \"normal\",\r\n    fontWeight: 500,\r\n    fontSize: \"18.9474px\",\r\n    lineHeight: \"150%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    textAlign: \"center\",\r\n    letterSpacing: \"0.03em\",\r\n    color: \"#313D4F\",\r\n    width: \"173px\",\r\n    height: \"40px\",\r\n    boxShadow: \"none\",\r\n    backgroundColor: \"#FFFFFF\",\r\n    textTransform: \"none\",\r\n    // border: \"1px solid #4379EE\",\r\n    marginRight: \"10px\",\r\n  },\r\n  root: {\r\n    paddingTop: \"31px\",\r\n    // backgroundColor: \"white\",\r\n  },\r\n  search: {\r\n    position: \"relative\",\r\n    borderRadius: 9,\r\n    paddingLeft: theme.spacing(2.5),\r\n    width: 36,\r\n    border: \"2px solid\",\r\n    borderColor: \"rgba(0,0,0,0.2)\",\r\n    backgroundColor: \"white\",\r\n    transition: theme.transitions.create([\"background-color\", \"width\"]),\r\n    \"&:hover\": {\r\n      cursor: \"pointer\",\r\n      backgroundColor: \"white\",\r\n    },\r\n  },\r\n  searchFocused: {\r\n    marginLeft: \"10px\",\r\n    backgroundColor: \"white\",\r\n    border: \"2px solid\",\r\n    borderColor: \"rgba(0,0,0,0.2)\",\r\n    width: \"141px\",\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      width: \"141px\",\r\n    },\r\n  },\r\n  searchIcon: {\r\n    width: 36,\r\n    right: 0,\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    transition: theme.transitions.create(\"right\"),\r\n    \"&:hover\": {\r\n      cursor: \"pointer\",\r\n    },\r\n  },\r\n  searchIconOpened: {\r\n    right: theme.spacing(1.25),\r\n  },\r\n  inputRoot: {\r\n    color: \"inherit\",\r\n    width: \"100%\",\r\n  },\r\n  inputInput: {\r\n    height: 36,\r\n    padding: 0,\r\n    paddingRight: 36 + theme.spacing(1.25),\r\n    width: \"100%\",\r\n  },\r\n  messageContent: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  root: {\r\n    \"& label.Mui-focused\": {\r\n      color: \"#C7C7C7\",\r\n    },\r\n    \"& .MuiOutlinedInput-root\": {\r\n      borderRadius: \"8.4px\",\r\n      height: \"38.68px\",\r\n      border: \"1.05263px solid #C7C7C7\",\r\n      \"& fieldset\": {\r\n        borderColor: \"#C7C7C7\",\r\n      },\r\n      // \"&:hover fieldset\": {\r\n      //   borderColor: \"#C7C7C7\",\r\n      // },\r\n      \"&.Mui-focused fieldset\": {\r\n        borderColor: \"#C7C7C7\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n","D:\\ADA\\ADA Portal\\src\\pages\\typography\\editStatusPopup.js",["272"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function EditStatusPopup({ handleClose, content }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"fixed\",\r\n        background: \"#00000080\",\r\n        width: \"100%\",\r\n        height: \"100vh\",\r\n        top: \"0\",\r\n        left: \"0\",\r\n        zIndex: \"999\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          position: \"relative\",\r\n          width: \"343px\",\r\n          margin: \"0 auto\",\r\n          height: \"auto\",\r\n          marginTop: \"220px\",\r\n          background: \"#fff\",\r\n          borderRadius: \"30px\",\r\n          padding: \"20px\",\r\n          overflow: \"auto\",\r\n        }}\r\n      >\r\n        {content}\r\n        <button\r\n          className=\"close-icon\"\r\n          type=\"button\"\r\n          style={{\r\n            color: \"#FFFFFF\",\r\n            border: \"none\",\r\n            width: \"200px\",\r\n            height: \"50px\",\r\n            borderRadius: \"40px\",\r\n            lineHeight: \"20px\",\r\n            fontFamily: \"Inter\",\r\n            textAlign: \"center\",\r\n            marginTop: \"5px\",\r\n            background: \"#0AA539\",\r\n            fontSize: \"15px\",\r\n          }}\r\n          onClick={handleClose}\r\n        >\r\n          Okay! Got it\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"273","replacedBy":"274"},{"ruleId":"275","replacedBy":"276"},{"ruleId":"277","severity":1,"message":"278","line":4,"column":10,"nodeType":"279","messageId":"280","endLine":4,"endColumn":13},{"ruleId":"277","severity":1,"message":"281","line":4,"column":15,"nodeType":"279","messageId":"280","endLine":4,"endColumn":25},{"ruleId":"277","severity":1,"message":"282","line":4,"column":27,"nodeType":"279","messageId":"280","endLine":4,"endColumn":31},{"ruleId":"277","severity":1,"message":"283","line":5,"column":8,"nodeType":"279","messageId":"280","endLine":5,"endColumn":12},{"ruleId":"277","severity":1,"message":"284","line":9,"column":18,"nodeType":"279","messageId":"280","endLine":9,"endColumn":30},{"ruleId":"277","severity":1,"message":"285","line":10,"column":17,"nodeType":"279","messageId":"280","endLine":10,"endColumn":28},{"ruleId":"277","severity":1,"message":"286","line":11,"column":16,"nodeType":"279","messageId":"280","endLine":11,"endColumn":26},{"ruleId":"277","severity":1,"message":"287","line":7,"column":3,"nodeType":"279","messageId":"280","endLine":7,"endColumn":7},{"ruleId":"277","severity":1,"message":"288","line":8,"column":3,"nodeType":"279","messageId":"280","endLine":8,"endColumn":6},{"ruleId":"277","severity":1,"message":"289","line":9,"column":3,"nodeType":"279","messageId":"280","endLine":9,"endColumn":12},{"ruleId":"277","severity":1,"message":"290","line":10,"column":3,"nodeType":"279","messageId":"280","endLine":10,"endColumn":7},{"ruleId":"277","severity":1,"message":"291","line":15,"column":13,"nodeType":"279","messageId":"280","endLine":15,"endColumn":18},{"ruleId":"277","severity":1,"message":"292","line":17,"column":8,"nodeType":"279","messageId":"280","endLine":17,"endColumn":18},{"ruleId":"277","severity":1,"message":"293","line":23,"column":8,"nodeType":"279","messageId":"280","endLine":23,"endColumn":12},{"ruleId":"277","severity":1,"message":"294","line":41,"column":8,"nodeType":"279","messageId":"280","endLine":41,"endColumn":13},{"ruleId":"277","severity":1,"message":"295","line":42,"column":8,"nodeType":"279","messageId":"280","endLine":42,"endColumn":19},{"ruleId":"277","severity":1,"message":"296","line":42,"column":21,"nodeType":"279","messageId":"280","endLine":42,"endColumn":35},{"ruleId":"277","severity":1,"message":"297","line":43,"column":8,"nodeType":"279","messageId":"280","endLine":43,"endColumn":17},{"ruleId":"277","severity":1,"message":"298","line":43,"column":19,"nodeType":"279","messageId":"280","endLine":43,"endColumn":31},{"ruleId":"299","severity":1,"message":"300","line":66,"column":11,"nodeType":"301","endLine":66,"endColumn":56},{"ruleId":"299","severity":1,"message":"300","line":123,"column":21,"nodeType":"301","endLine":123,"endColumn":70},{"ruleId":"299","severity":1,"message":"300","line":146,"column":21,"nodeType":"301","endLine":146,"endColumn":70},{"ruleId":"277","severity":1,"message":"302","line":7,"column":8,"nodeType":"279","messageId":"280","endLine":7,"endColumn":14},{"ruleId":"277","severity":1,"message":"303","line":8,"column":8,"nodeType":"279","messageId":"280","endLine":8,"endColumn":13},{"ruleId":"277","severity":1,"message":"304","line":11,"column":8,"nodeType":"279","messageId":"280","endLine":11,"endColumn":12},{"ruleId":"277","severity":1,"message":"305","line":3,"column":16,"nodeType":"279","messageId":"280","endLine":3,"endColumn":32},{"ruleId":"277","severity":1,"message":"306","line":5,"column":10,"nodeType":"279","messageId":"280","endLine":5,"endColumn":24},{"ruleId":"277","severity":1,"message":"307","line":6,"column":8,"nodeType":"279","messageId":"280","endLine":6,"endColumn":25},{"ruleId":"277","severity":1,"message":"308","line":7,"column":10,"nodeType":"279","messageId":"280","endLine":7,"endColumn":15},{"ruleId":"277","severity":1,"message":"292","line":8,"column":8,"nodeType":"279","messageId":"280","endLine":8,"endColumn":18},{"ruleId":"277","severity":1,"message":"302","line":18,"column":8,"nodeType":"279","messageId":"280","endLine":18,"endColumn":14},{"ruleId":"277","severity":1,"message":"309","line":348,"column":12,"nodeType":"279","messageId":"280","endLine":348,"endColumn":34},{"ruleId":"277","severity":1,"message":"310","line":392,"column":12,"nodeType":"279","messageId":"280","endLine":392,"endColumn":38},{"ruleId":"277","severity":1,"message":"311","line":398,"column":10,"nodeType":"279","messageId":"280","endLine":398,"endColumn":21},{"ruleId":"277","severity":1,"message":"312","line":8,"column":3,"nodeType":"279","messageId":"280","endLine":8,"endColumn":9},{"ruleId":"277","severity":1,"message":"313","line":16,"column":3,"nodeType":"279","messageId":"280","endLine":16,"endColumn":12},{"ruleId":"277","severity":1,"message":"304","line":30,"column":8,"nodeType":"279","messageId":"280","endLine":30,"endColumn":12},{"ruleId":"277","severity":1,"message":"303","line":35,"column":8,"nodeType":"279","messageId":"280","endLine":35,"endColumn":13},{"ruleId":"277","severity":1,"message":"314","line":36,"column":8,"nodeType":"279","messageId":"280","endLine":36,"endColumn":15},{"ruleId":"277","severity":1,"message":"315","line":38,"column":7,"nodeType":"279","messageId":"280","endLine":38,"endColumn":15},{"ruleId":"277","severity":1,"message":"316","line":9,"column":21,"nodeType":"279","messageId":"280","endLine":9,"endColumn":32},{"ruleId":"277","severity":1,"message":"317","line":10,"column":19,"nodeType":"279","messageId":"280","endLine":10,"endColumn":30},{"ruleId":"277","severity":1,"message":"318","line":11,"column":18,"nodeType":"279","messageId":"280","endLine":11,"endColumn":25},{"ruleId":"277","severity":1,"message":"319","line":23,"column":8,"nodeType":"279","messageId":"280","endLine":23,"endColumn":11},{"ruleId":"277","severity":1,"message":"320","line":2,"column":10,"nodeType":"279","messageId":"280","endLine":2,"endColumn":14},{"ruleId":"277","severity":1,"message":"281","line":2,"column":10,"nodeType":"279","messageId":"280","endLine":2,"endColumn":20},{"ruleId":"277","severity":1,"message":"321","line":5,"column":8,"nodeType":"279","messageId":"280","endLine":5,"endColumn":16},{"ruleId":"277","severity":1,"message":"322","line":2,"column":16,"nodeType":"279","messageId":"280","endLine":2,"endColumn":22},{"ruleId":"277","severity":1,"message":"323","line":2,"column":24,"nodeType":"279","messageId":"280","endLine":2,"endColumn":32},{"ruleId":"277","severity":1,"message":"324","line":2,"column":34,"nodeType":"279","messageId":"280","endLine":2,"endColumn":39},{"ruleId":"277","severity":1,"message":"325","line":5,"column":10,"nodeType":"279","messageId":"280","endLine":5,"endColumn":18},{"ruleId":"277","severity":1,"message":"326","line":5,"column":20,"nodeType":"279","messageId":"280","endLine":5,"endColumn":23},{"ruleId":"277","severity":1,"message":"302","line":12,"column":8,"nodeType":"279","messageId":"280","endLine":12,"endColumn":14},{"ruleId":"277","severity":1,"message":"327","line":16,"column":9,"nodeType":"279","messageId":"280","endLine":16,"endColumn":16},{"ruleId":"277","severity":1,"message":"328","line":16,"column":18,"nodeType":"279","messageId":"280","endLine":16,"endColumn":23},{"ruleId":"277","severity":1,"message":"329","line":16,"column":25,"nodeType":"279","messageId":"280","endLine":16,"endColumn":30},{"ruleId":"277","severity":1,"message":"330","line":16,"column":47,"nodeType":"279","messageId":"280","endLine":16,"endColumn":53},{"ruleId":"277","severity":1,"message":"331","line":18,"column":7,"nodeType":"279","messageId":"280","endLine":18,"endColumn":12},{"ruleId":"277","severity":1,"message":"332","line":21,"column":15,"nodeType":"279","messageId":"280","endLine":21,"endColumn":23},{"ruleId":"277","severity":1,"message":"333","line":44,"column":10,"nodeType":"279","messageId":"280","endLine":44,"endColumn":23},{"ruleId":"277","severity":1,"message":"331","line":22,"column":7,"nodeType":"279","messageId":"280","endLine":22,"endColumn":12},{"ruleId":"273","replacedBy":"334"},{"ruleId":"275","replacedBy":"335"},{"ruleId":"336","severity":1,"message":"337","line":52,"column":5,"nodeType":"338","messageId":"339","endLine":52,"endColumn":10},{"ruleId":"336","severity":1,"message":"340","line":97,"column":3,"nodeType":"338","messageId":"339","endLine":97,"endColumn":7},{"ruleId":"277","severity":1,"message":"341","line":2,"column":8,"nodeType":"279","messageId":"280","endLine":2,"endColumn":17},"no-native-reassign",["342"],"no-negated-in-lhs",["343"],"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'IconButton' is defined but never used.","'Link' is defined but never used.","'Icon' is defined but never used.","'FacebookIcon' is defined but never used.","'TwitterIcon' is defined but never used.","'GithubIcon' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'TextField' is defined but never used.","'Fade' is defined but never used.","'Icons' is defined but never used.","'classnames' is defined but never used.","'logo' is defined but never used.","'error' is assigned a value but never used.","'activeTabId' is assigned a value but never used.","'setActiveTabId' is assigned a value but never used.","'nameValue' is assigned a value but never used.","'setNameValue' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Widget' is defined but never used.","'Table' is defined but never used.","'mock' is defined but never used.","'CircularProgress' is defined but never used.","'ToastContainer' is defined but never used.","'SyntaxHighlighter' is defined but never used.","'docco' is defined but never used.","'handleNotificationCall' is defined but never used.","'changeNotificationPosition' is defined but never used.","'CloseButton' is defined but never used.","'Button' is defined but never used.","'LineChart' is defined but never used.","'BigStat' is defined but never used.","'messages' is assigned a value but never used.","'SupportIcon' is defined but never used.","'LibraryIcon' is defined but never used.","'FAQIcon' is defined but never used.","'Dot' is defined but never used.","'fade' is defined but never used.","'back_btn' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'Input' is defined but never used.","'BarChart' is defined but never used.","'Bar' is defined but never used.","'product' is assigned a value but never used.","'total' is assigned a value but never used.","'color' is assigned a value but never used.","'bounce' is assigned a value but never used.","'theme' is assigned a value but never used.","'setValue' is assigned a value but never used.","'getRandomData' is defined but never used.",["342"],["343"],"no-dupe-keys","Duplicate key 'color'.","ObjectExpression","unexpected","Duplicate key 'root'.","'PropTypes' is defined but never used.","no-global-assign","no-unsafe-negation"]